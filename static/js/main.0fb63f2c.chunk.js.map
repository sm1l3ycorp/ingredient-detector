{"version":3,"sources":["Components/Header/Header.js","Components/ImageUploader/ImageUploader.js","Components/Detector/Detector.js","Components/Ingredients/Ingredients.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","grow","flexGrow","title","display","paddingLeft","breakpoints","up","Header","classes","className","AppBar","position","Toolbar","Typography","variant","noWrap","ImageUploader","images","setImages","value","onChange","imageList","addUpdateIndex","maxNumber","dataURLKey","onImageUpload","onImageUpdate","onImageRemoveAll","dragProps","onImageRemove","isDragging","length","Button","color","startIcon","onClick","map","image","index","src","alt","width","Detector","API_KEY","setDetected","app","Clarifai","App","apiKey","detect","a","models","predict","FOOD_MODEL","data","rawData","outputs","concepts","forEach","element","parseFloat","toFixed","console","log","useEffect","data_url","split","propTypes","PropTypes","string","isRequired","array","func","StyledTableCell","withStyles","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","root","TableRow","Ingredients","detected","React","useMemo","columns","accessor","useTable","initialState","hiddenColumns","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","TableContainer","component","Paper","TableHead","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","TableBody","row","getRowProps","cells","cell","getCellProps","process","AppStyle","styled","div","TableWrapper","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fb63f2c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FastfoodIcon from \"@material-ui/icons/Fastfood\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    display: \"none\",\r\n    paddingLeft: \"1rem\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Header = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <FastfoodIcon />\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Ingredient Detector\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport ImageUploading from \"react-images-uploading\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport UpdateIcon from \"@material-ui/icons/Update\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ImageUploader = ({ images, setImages }) => {\r\n  const maxNumber = 1;\r\n\r\n  const onChange = (imageList, addUpdateIndex) => {\r\n    setImages(imageList);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ImageUploading\r\n        value={images}\r\n        onChange={onChange}\r\n        maxNumber={maxNumber}\r\n        dataURLKey=\"data_url\"\r\n      >\r\n        {({\r\n          imageList,\r\n          onImageUpload,\r\n          onImageRemoveAll,\r\n          onImageUpdate,\r\n          onImageRemove,\r\n          isDragging,\r\n          dragProps,\r\n        }) => (\r\n          <div className=\"upload__image-wrapper\">\r\n            {images.length === 0 && (\r\n              <>\r\n                <br />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                  startIcon={<CloudUploadIcon />}\r\n                  onClick={onImageUpload}\r\n                  {...dragProps}\r\n                >\r\n                  Upload Image\r\n                </Button>\r\n                <br /><br />\r\n                Upload an image to detect food ingredients.\r\n              </>\r\n            )}\r\n            {imageList.map((image, index) => (\r\n              <div key={index} className=\"image-item\">\r\n                  <br />\r\n                <img src={image[\"data_url\"]} alt=\"\" width=\"200\" />\r\n                <div className=\"image-item__btn-wrapper\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    startIcon={<UpdateIcon />}\r\n                    onClick={() => onImageUpdate(index)}\r\n                  >\r\n                    Update\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </ImageUploading>\r\n    </>\r\n  );\r\n};\r\n\r\nImageUploader.propTypes = {\r\n  images: PropTypes.array,\r\n  setImages: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImageUploader;\r\n","import { React, useEffect } from \"react\";\r\nimport Clarifai from \"clarifai\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Detector = ({ API_KEY, images, setDetected }) => {\r\n  const app = new Clarifai.App({ apiKey: API_KEY });\r\n\r\n  const detect = async (image) => {\r\n    try {\r\n      const data = await app.models.predict(Clarifai.FOOD_MODEL, image);\r\n      data.rawData.outputs[0].data.concepts.forEach((element) => {\r\n        element.value = `${parseFloat(element.value * 100).toFixed(2)} %`;\r\n      });\r\n      setDetected(data.rawData.outputs[0].data.concepts);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setDetected([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (images.length > 0) {\r\n      const temp = images[0].data_url;\r\n      const parsed = temp.split(\",\");\r\n      const image = parsed[1];\r\n      detect(image);\r\n    }\r\n  }, [images]);\r\n\r\n  return <></>;\r\n};\r\n\r\nDetector.propTypes = {\r\n  API_KEY: PropTypes.string.isRequired,\r\n  images: PropTypes.array,\r\n  setDetected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Detector;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { useTable } from \"react-table\";\r\nimport MaUTable from \"@material-ui/core/Table\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: '#d3d3d3',\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\n\r\nconst Ingredients = ({ detected }) => {\r\n  const data = React.useMemo(() => detected, [detected]);\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"ID\",\r\n        accessor: \"id\",\r\n      },\r\n      {\r\n        Header: \"INGREDIENT\",\r\n        accessor: \"name\",\r\n      },\r\n      {\r\n        Header: \"CHANCE\",\r\n        accessor: \"value\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable({ columns, data, initialState: { hiddenColumns: [\"id\"] } });\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      {detected.length > 0 && (\r\n        <TableContainer component={Paper}>\r\n          <MaUTable {...getTableProps()}>\r\n            <TableHead>\r\n              {headerGroups.map((headerGroup) => (\r\n                <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map((column) => (\r\n                    <TableCell {...column.getHeaderProps()}>\r\n                      {column.render(\"Header\")}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableHead>\r\n            <TableBody {...getTableBodyProps()}>\r\n              {rows.map((row) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <StyledTableRow {...row.getRowProps()}>\r\n                    {row.cells.map((cell) => {\r\n                      return (\r\n                        <StyledTableCell {...cell.getCellProps()}>\r\n                          {cell.render(\"Cell\")}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </StyledTableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </MaUTable>\r\n        </TableContainer>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nIngredients.propTypes = {\r\n  detected: PropTypes.array.isRequired,\r\n};\r\n\r\n\r\nexport default Ingredients;\r\n","import styled from \"styled-components\";\nimport { React, useState } from \"react\";\nimport Header from \"./Components/Header/Header\";\nimport ImageUploader from \"./Components/ImageUploader/ImageUploader\";\nimport Detector from \"./Components/Detector/Detector\";\nimport Ingredients from \"./Components/Ingredients/Ingredients\";\nconst API_KEY = process.env.API_KEY;\n\nconst AppStyle = styled.div`\n  text-align: center;\n`;\nconst TableWrapper = styled.div`\n  width: 30rem;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst App = () => {\n  const [images, setImages] = useState([]);\n  const [detected, setDetected] = useState([]);\n\n  return (\n    <AppStyle>\n      <Header />\n      <ImageUploader images={images} setImages={setImages} />\n      <Detector API_KEY={API_KEY} images={images} setDetected={setDetected} />\n      <br />\n      <TableWrapper>\n        <Ingredients detected={detected} />\n      </TableWrapper>\n      <br />\n    </AppStyle>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}